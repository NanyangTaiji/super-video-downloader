package com.myAllVideoBrowser.util;

import static com.myAllVideoBrowser.util.downloaders.generic_downloader.models.VideoTaskState.CANCELED;
import static com.myAllVideoBrowser.util.downloaders.generic_downloader.models.VideoTaskState.DOWNLOADING;
import static com.myAllVideoBrowser.util.downloaders.generic_downloader.models.VideoTaskState.ENOSPC;
import static com.myAllVideoBrowser.util.downloaders.generic_downloader.models.VideoTaskState.ERROR;
import static com.myAllVideoBrowser.util.downloaders.generic_downloader.models.VideoTaskState.PAUSE;
import static com.myAllVideoBrowser.util.downloaders.generic_downloader.models.VideoTaskState.PENDING;
import static com.myAllVideoBrowser.util.downloaders.generic_downloader.models.VideoTaskState.PREPARE;
import static com.myAllVideoBrowser.util.downloaders.generic_downloader.models.VideoTaskState.SUCCESS;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import androidx.core.app.NotificationCompat;
import com.myAllVideoBrowser.R;
import com.myAllVideoBrowser.ui.main.home.MainActivity;
import com.myAllVideoBrowser.util.downloaders.NotificationReceiver;
import com.myAllVideoBrowser.util.downloaders.generic_downloader.models.VideoTaskItem;

import java.io.File;

public class NotificationsHelper {

    public static final String NOTIFICATION_CHANNEL_ID = "NOTIFICATION_CHANNEL_ID_ALL_DOWNLOADER";
    private final Context context;
    private final NotificationManager notificationManager;

    public NotificationsHelper(Context context) {
        this.context = context;
        this.notificationManager =
                (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
        createChannel(context);
    }

    public Pair<Integer, NotificationCompat.Builder> createNotificationBuilder(VideoTaskItem task) {
        float taskPercent = task.getPercentFromBytes() == 0F ? task.getPercent() : task.getPercentFromBytes();
        NotificationCompat.Builder builder = new NotificationCompat.Builder(
                context, NOTIFICATION_CHANNEL_ID
        ).setOnlyAlertOnce(true);

        builder.setContentTitle(new File(task.getFileName()).getName())
                .setContentText(task.getLineInfo())
                .setSmallIcon(android.R.drawable.stat_sys_download)
                .setOngoing(false)
                .setProgress(100, (int) taskPercent, false)
                .addAction(notificationActionOpen(false, false));

        switch (task.getTaskState()) {
            case PREPARE:
                builder.setSubText("prepare")
                        .setProgress(0, 0, true)
                        .setOngoing(false)
                        .setSmallIcon(android.R.drawable.stat_sys_download_done)
                        .addAction(createPauseBroadcastMessage(task.getMId()))
                        .addAction(createCancelBroadcastMessage(task.getMId()));
                break;
            case PENDING:
                builder.setSubText("pending")
                        .setProgress(0, 0, true)
                        .setOngoing(false)
                        .setSmallIcon(android.R.drawable.stat_sys_download_done)
                        .addAction(createPauseBroadcastMessage(task.getMId()))
                        .addAction(createCancelBroadcastMessage(task.getMId()));
                break;
            case DOWNLOADING:
                builder.setSubText("downloading...")
                        .setProgress(100, (int) taskPercent, false)
                        .setOngoing(false)
                        .setSmallIcon(android.R.drawable.stat_sys_download)
                        .addAction(createPauseBroadcastMessage(task.getMId()))
                        .addAction(createCancelBroadcastMessage(task.getMId()));
                break;
            case PAUSE:
                builder.setSubText("pause")
                        .setProgress(100, (int) taskPercent, false)
                        .setOngoing(false)
                        .setSmallIcon(android.R.drawable.stat_sys_download)
                        .addAction(createResumeBroadcastMessage(task.getMId()))
                        .addAction(createCancelBroadcastMessage(task.getMId()));
                break;
            case SUCCESS:
                builder.clearActions()
                        .setContentIntent(notificationIntentWatch(task.getFileName()))
                        .setSubText("success!!!")
                        .setProgress(0, 0, false)
                        .setOngoing(false)
                        .setSmallIcon(android.R.drawable.stat_sys_download_done)
                        .addAction(notificationActionOpen(true, false))
                        .addAction(notificationActionWatch(task.getFileName()));
                break;
            case ERROR:
            case ENOSPC:
                builder.clearActions()
                        .setSubText("Error")
                        .setContentText("Failed " + task.getErrorMessage())
                        .setProgress(100, (int) taskPercent, false)
                        .setOngoing(false)
                        .setSmallIcon(android.R.drawable.stat_sys_download_done)
                        .addAction(notificationActionOpen(true, true))
                        .addAction(createResumeBroadcastMessage(task.getMId()));
                break;
            case CANCELED:
                builder.setSubText("Canceled")
                        .setProgress(0, 0, false)
                        .setOngoing(false)
                        .setSmallIcon(android.R.drawable.stat_sys_download);
                break;
        }
        return new Pair<>(task.getMId().hashCode(), builder);
    }

    public void showNotification(Pair<Integer, NotificationCompat.Builder> builderPair) {
        notificationManager.notify(builderPair.first, builderPair.second.build());
    }

    public void hideNotification(int id) {
        notificationManager.cancel(id);
    }

    private NotificationCompat.Action notificationActionOpen(boolean isFinished, boolean isError) {
        Intent intent = new Intent(context, MainActivity.class);
        intent.putExtra("IS_FINISHED_DOWNLOAD_ACTION_KEY", isFinished);
        intent.putExtra("IS_FINISHED_DOWNLOAD_ACTION_ERROR_KEY", isError);

        int flags = Build.VERSION.SDK_INT >= Build.VERSION_CODES.S ?
                PendingIntent.FLAG_MUTABLE : PendingIntent.FLAG_UPDATE_CURRENT;

        PendingIntent pendingIntent = PendingIntent.getActivity(
                context, isFinished ? 0 : 2, intent, flags
        );
        return new NotificationCompat.Action(
                android.R.drawable.stat_sys_download_done,
                context.getString(R.string.download_open_in_app),
                pendingIntent
        );
    }

    private NotificationCompat.Action notificationActionWatch(String filename) {
        return new NotificationCompat.Action(
                android.R.drawable.stat_sys_download_done,
                context.getString(R.string.download_watch_in_app),
                notificationIntentWatch(filename)
        );
    }

    private PendingIntent notificationIntentWatch(String filename) {
        String filenameFixed = new File(filename).getName();
        Intent intent = new Intent(context, MainActivity.class);
        intent.putExtra("IS_FINISHED_DOWNLOAD_ACTION_KEY", true)
                .putExtra("DOWNLOAD_FILENAME_KEY", filenameFixed);

        int flags = Build.VERSION.SDK_INT >= Build.VERSION_CODES.S ?
                PendingIntent.FLAG_MUTABLE : PendingIntent.FLAG_UPDATE_CURRENT;

        return PendingIntent.getActivity(
                context, 777, intent, flags
        );
    }

    private NotificationCompat.Action createCancelBroadcastMessage(String taskId) {
        Intent intent = new Intent(context, NotificationReceiver.class);
        intent.putExtra("TASK_ID", taskId);
        intent.setAction("ACTION_CANCEL");
        return new NotificationCompat.Action(
                android.R.drawable.stat_sys_download_done,
                context.getString(R.string.progress_menu_cancel),
                createActionIntent(intent, taskId.hashCode())
        );
    }

    private NotificationCompat.Action createPauseBroadcastMessage(String taskId) {
        Intent intent = new Intent(context, NotificationReceiver.class);
        intent.putExtra("TASK_ID", taskId);
        intent.setAction("ACTION_PAUSE");
        return new NotificationCompat.Action(
                android.R.drawable.stat_sys_download_done,
                context.getString(R.string.progress_menu_pause),
                createActionIntent(intent, taskId.hashCode())
        );
    }

    private NotificationCompat.Action createResumeBroadcastMessage(String taskId) {
        Intent intent = new Intent(context, NotificationReceiver.class);
        intent.putExtra("TASK_ID", taskId);
        intent.setAction("ACTION_RESUME");
        return new NotificationCompat.Action(
                android.R.drawable.stat_sys_download_done,
                context.getString(R.string.progress_menu_resume),
                createActionIntent(intent, taskId.hashCode())
        );
    }

    private PendingIntent createActionIntent(Intent actionIntent, int requestCode) {
        int flags = Build.VERSION.SDK_INT >= Build.VERSION_CODES.S ?
                PendingIntent.FLAG_MUTABLE : PendingIntent.FLAG_UPDATE_CURRENT;

        return PendingIntent.getBroadcast(
                context, requestCode, actionIntent, flags
        );
    }

    private void createChannel(Context appContext) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            CharSequence name = appContext.getApplicationInfo().loadLabel(appContext.getPackageManager());
            NotificationChannel channel = new NotificationChannel(
                    NOTIFICATION_CHANNEL_ID,
                    name,
                    NotificationManager.IMPORTANCE_HIGH
            );
            channel.setSound(null, null);
            channel.setDescription(context.getString(R.string.app_download_channel_id));
            notificationManager.createNotificationChannel(channel);
        }
    }

    public static class Pair<A, B> {
        public final A first;
        public final B second;
        public Pair(A first, B second) {
            this.first = first;
            this.second = second;
        }
    }
}
